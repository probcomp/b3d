# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import flatbuffers

class FBKeyValuePair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBKeyValuePair(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBKeyValuePair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def FBKeyValuePairBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x63\x64\x69\x63", size_prefixed=size_prefixed)

    # FBKeyValuePair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBKeyValuePair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FBColor import FBColor
            obj = FBColor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBKeyValuePair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FBKeyValuePairStart(builder): builder.StartObject(2)
def FBKeyValuePairAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def FBKeyValuePairAddValue(builder, value): builder.PrependUint32Slot(1, value, 0)
def FBKeyValuePairEnd(builder): return builder.EndObject()
