# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import flatbuffers

class FBObjectPose(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBObjectPose(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBObjectPose()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def FBObjectPoseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x6F\x62\x6A\x70", size_prefixed=size_prefixed)

    # FBObjectPose
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBObjectPose
    def Positions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FBVector3 import FBVector3
            obj = FBVector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBObjectPose
    def PositionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBObjectPose
    def Quaternions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FBQuaternion import FBQuaternion
            obj = FBQuaternion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBObjectPose
    def QuaternionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FBObjectPoseStart(builder): builder.StartObject(2)
def FBObjectPoseAddPositions(builder, positions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(positions), 0)
def FBObjectPoseStartPositionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FBObjectPoseAddQuaternions(builder, quaternions): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(quaternions), 0)
def FBObjectPoseStartQuaternionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FBObjectPoseEnd(builder): return builder.EndObject()
