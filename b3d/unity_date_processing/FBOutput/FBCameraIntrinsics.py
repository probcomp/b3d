# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import flatbuffers

class FBCameraIntrinsics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBCameraIntrinsics(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBCameraIntrinsics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def FBCameraIntrinsicsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x63\x61\x6D\x65", size_prefixed=size_prefixed)

    # FBCameraIntrinsics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBCameraIntrinsics
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBCameraIntrinsics
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBCameraIntrinsics
    def FocalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FBCameraIntrinsics
    def SensorSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .FBVector2 import FBVector2
            obj = FBVector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBCameraIntrinsics
    def LensShift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .FBVector2 import FBVector2
            obj = FBVector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBCameraIntrinsics
    def GateFit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FBCameraIntrinsics
    def Fov(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FBCameraIntrinsics
    def NearClipPlane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FBCameraIntrinsics
    def FarClipPlane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FBCameraIntrinsicsStart(builder): builder.StartObject(9)
def FBCameraIntrinsicsAddWidth(builder, width): builder.PrependInt32Slot(0, width, 0)
def FBCameraIntrinsicsAddHeight(builder, height): builder.PrependInt32Slot(1, height, 0)
def FBCameraIntrinsicsAddFocalLength(builder, focalLength): builder.PrependFloat32Slot(2, focalLength, 0.0)
def FBCameraIntrinsicsAddSensorSize(builder, sensorSize): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sensorSize), 0)
def FBCameraIntrinsicsAddLensShift(builder, lensShift): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lensShift), 0)
def FBCameraIntrinsicsAddGateFit(builder, gateFit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(gateFit), 0)
def FBCameraIntrinsicsAddFov(builder, fov): builder.PrependFloat32Slot(6, fov, 0.0)
def FBCameraIntrinsicsAddNearClipPlane(builder, nearClipPlane): builder.PrependFloat32Slot(7, nearClipPlane, 0.0)
def FBCameraIntrinsicsAddFarClipPlane(builder, farClipPlane): builder.PrependFloat32Slot(8, farClipPlane, 0.0)
def FBCameraIntrinsicsEnd(builder): return builder.EndObject()
