# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import flatbuffers

class FBMetaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBMetaData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBMetaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def FBMetaDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x6D\x65\x74\x61", size_prefixed=size_prefixed)

    # FBMetaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBMetaData
    def Scene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FBMetaData
    def Nframe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBMetaData
    def Nobjects(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBMetaData
    def Nkeypoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBMetaData
    def Samplingrate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FBMetaDataStart(builder): builder.StartObject(5)
def FBMetaDataAddScene(builder, scene): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(scene), 0)
def FBMetaDataAddNframe(builder, nframe): builder.PrependInt32Slot(1, nframe, 0)
def FBMetaDataAddNobjects(builder, nobjects): builder.PrependInt32Slot(2, nobjects, 0)
def FBMetaDataAddNkeypoints(builder, nkeypoints): builder.PrependInt32Slot(3, nkeypoints, 0)
def FBMetaDataAddSamplingrate(builder, samplingrate): builder.PrependFloat32Slot(4, samplingrate, 0.0)
def FBMetaDataEnd(builder): return builder.EndObject()
